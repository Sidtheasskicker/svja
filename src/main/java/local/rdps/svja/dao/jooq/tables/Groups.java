/*
 * This file is generated by jOOQ.
 */
package local.rdps.svja.dao.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import local.rdps.svja.dao.jooq.DefaultSchema;
import local.rdps.svja.dao.jooq.Indexes;
import local.rdps.svja.dao.jooq.Keys;
import local.rdps.svja.dao.jooq.tables.records.GroupsRecord;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Groups extends TableImpl<GroupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>groups</code>
     */
    public static final Groups GROUPS = new Groups();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<GroupsRecord> getRecordType() {
        return GroupsRecord.class;
    }

    /**
     * The column <code>groups.id</code>.
     */
    public final TableField<GroupsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>groups.name</code>.
     */
    public final TableField<GroupsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>groups.description</code>.
     */
    public final TableField<GroupsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>groups.modified_by</code>.
     */
    public final TableField<GroupsRecord, Integer> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>groups.modified_date</code>.
     */
    public final TableField<GroupsRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Groups(Name alias, Table<GroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Groups(Name alias, Table<GroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>groups</code> table reference
     */
    public Groups(String alias) {
        this(DSL.name(alias), GROUPS);
    }

    /**
     * Create an aliased <code>groups</code> table reference
     */
    public Groups(Name alias) {
        this(alias, GROUPS);
    }

    /**
     * Create a <code>groups</code> table reference
     */
    public Groups() {
        this(DSL.name("groups"), null);
    }

    public <O extends Record> Groups(Table<O> child, ForeignKey<O, GroupsRecord> key) {
        super(child, key, GROUPS);
    }

    @Override
    @NotNull
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GROUPS_ID_INDEX);
    }

    @Override
    @NotNull
    public Identity<GroupsRecord, Integer> getIdentity() {
        return (Identity<GroupsRecord, Integer>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<GroupsRecord> getPrimaryKey() {
        return Keys.PK_GROUPS;
    }

    @Override
    @NotNull
    public List<UniqueKey<GroupsRecord>> getKeys() {
        return Arrays.<UniqueKey<GroupsRecord>>asList(Keys.PK_GROUPS, Keys.SQLITE_AUTOINDEX_GROUPS_1, Keys.SQLITE_AUTOINDEX_GROUPS_2);
    }

    @Override
    @NotNull
    public List<ForeignKey<GroupsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GroupsRecord, ?>>asList(Keys.FK_GROUPS_USERS_1);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK_GROUPS_USERS_1);

        return _users;
    }

    @Override
    @NotNull
    public Groups as(String alias) {
        return new Groups(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Groups as(Name alias) {
        return new Groups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Groups rename(String name) {
        return new Groups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Groups rename(Name name) {
        return new Groups(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<Integer, String, String, Integer, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
