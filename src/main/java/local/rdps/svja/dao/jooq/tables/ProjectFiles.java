/*
 * This file is generated by jOOQ.
 */
package local.rdps.svja.dao.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import local.rdps.svja.dao.jooq.DefaultSchema;
import local.rdps.svja.dao.jooq.Indexes;
import local.rdps.svja.dao.jooq.Keys;
import local.rdps.svja.dao.jooq.tables.records.ProjectFilesRecord;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectFiles extends TableImpl<ProjectFilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>project_files</code>
     */
    public static final ProjectFiles PROJECT_FILES = new ProjectFiles();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<ProjectFilesRecord> getRecordType() {
        return ProjectFilesRecord.class;
    }

    /**
     * The column <code>project_files.project_id</code>.
     */
    public final TableField<ProjectFilesRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>project_files.file_id</code>.
     */
    public final TableField<ProjectFilesRecord, Integer> FILE_ID = createField(DSL.name("file_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>project_files.modified_by</code>.
     */
    public final TableField<ProjectFilesRecord, Integer> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>project_files.modified_date</code>.
     */
    public final TableField<ProjectFilesRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private ProjectFiles(Name alias, Table<ProjectFilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectFiles(Name alias, Table<ProjectFilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>project_files</code> table reference
     */
    public ProjectFiles(String alias) {
        this(DSL.name(alias), PROJECT_FILES);
    }

    /**
     * Create an aliased <code>project_files</code> table reference
     */
    public ProjectFiles(Name alias) {
        this(alias, PROJECT_FILES);
    }

    /**
     * Create a <code>project_files</code> table reference
     */
    public ProjectFiles() {
        this(DSL.name("project_files"), null);
    }

    public <O extends Record> ProjectFiles(Table<O> child, ForeignKey<O, ProjectFilesRecord> key) {
        super(child, key, PROJECT_FILES);
    }

    @Override
    @NotNull
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECT_FILES_FID_INDEX, Indexes.PROJECT_FILES_PID_INDEX);
    }

    @Override
    @NotNull
    public UniqueKey<ProjectFilesRecord> getPrimaryKey() {
        return Keys.PK_PROJECT_FILES;
    }

    @Override
    @NotNull
    public List<UniqueKey<ProjectFilesRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectFilesRecord>>asList(Keys.PK_PROJECT_FILES);
    }

    @Override
    @NotNull
    public List<ForeignKey<ProjectFilesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectFilesRecord, ?>>asList(Keys.FK_PROJECT_FILES_PROJECTS_1, Keys.FK_PROJECT_FILES_FILES_1, Keys.FK_PROJECT_FILES_USERS_1);
    }

    private transient Projects _projects;
    private transient Files _files;
    private transient Users _users;

    public Projects projects() {
        if (_projects == null)
            _projects = new Projects(this, Keys.FK_PROJECT_FILES_PROJECTS_1);

        return _projects;
    }

    public Files files() {
        if (_files == null)
            _files = new Files(this, Keys.FK_PROJECT_FILES_FILES_1);

        return _files;
    }

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK_PROJECT_FILES_USERS_1);

        return _users;
    }

    @Override
    @NotNull
    public ProjectFiles as(String alias) {
        return new ProjectFiles(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public ProjectFiles as(Name alias) {
        return new ProjectFiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public ProjectFiles rename(String name) {
        return new ProjectFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public ProjectFiles rename(Name name) {
        return new ProjectFiles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<Integer, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
