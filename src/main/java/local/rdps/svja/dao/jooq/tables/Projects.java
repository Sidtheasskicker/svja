/*
 * This file is generated by jOOQ.
 */
package local.rdps.svja.dao.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import local.rdps.svja.dao.jooq.DefaultSchema;
import local.rdps.svja.dao.jooq.Indexes;
import local.rdps.svja.dao.jooq.Keys;
import local.rdps.svja.dao.jooq.tables.records.ProjectsRecord;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projects extends TableImpl<ProjectsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>projects</code>
     */
    public static final Projects PROJECTS = new Projects();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<ProjectsRecord> getRecordType() {
        return ProjectsRecord.class;
    }

    /**
     * The column <code>projects.id</code>.
     */
    public final TableField<ProjectsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>projects.title</code>.
     */
    public final TableField<ProjectsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>projects.description</code>.
     */
    public final TableField<ProjectsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>projects.modified_by</code>.
     */
    public final TableField<ProjectsRecord, Integer> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>projects.modified_date</code>.
     */
    public final TableField<ProjectsRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Projects(Name alias, Table<ProjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projects(Name alias, Table<ProjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>projects</code> table reference
     */
    public Projects(String alias) {
        this(DSL.name(alias), PROJECTS);
    }

    /**
     * Create an aliased <code>projects</code> table reference
     */
    public Projects(Name alias) {
        this(alias, PROJECTS);
    }

    /**
     * Create a <code>projects</code> table reference
     */
    public Projects() {
        this(DSL.name("projects"), null);
    }

    public <O extends Record> Projects(Table<O> child, ForeignKey<O, ProjectsRecord> key) {
        super(child, key, PROJECTS);
    }

    @Override
    @NotNull
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECTS_ID_INDEX);
    }

    @Override
    @NotNull
    public Identity<ProjectsRecord, Integer> getIdentity() {
        return (Identity<ProjectsRecord, Integer>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<ProjectsRecord> getPrimaryKey() {
        return Keys.PK_PROJECTS;
    }

    @Override
    @NotNull
    public List<UniqueKey<ProjectsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectsRecord>>asList(Keys.PK_PROJECTS, Keys.SQLITE_AUTOINDEX_PROJECTS_1);
    }

    @Override
    @NotNull
    public List<ForeignKey<ProjectsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectsRecord, ?>>asList(Keys.FK_PROJECTS_USERS_1);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK_PROJECTS_USERS_1);

        return _users;
    }

    @Override
    @NotNull
    public Projects as(String alias) {
        return new Projects(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Projects as(Name alias) {
        return new Projects(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Projects rename(String name) {
        return new Projects(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Projects rename(Name name) {
        return new Projects(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<Integer, String, String, Integer, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
